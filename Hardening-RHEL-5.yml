---
- name: Acceso, Autenticacion y Autorizacion
  hosts: all
  become: true
  gather_facts: yes

  tasks:
    - name: 5.1.1. Verificar que el demonio cron está habilitado
      block: 
        - name: 5.1.1. Verificar estado del servicio crond
          ansible.builtin.command: systemctl is-enabled crond
          register: crond_status
          ignore_errors: yes

        - name: 5.1.1. Habilitar crond si no está habilitado
          ansible.builtin.command: systemctl --now enable crond

    - name: 5.1.2. Verificar que los permisos en /etc/crontab están configurados
      block:
        - name: 5.1.2 Verificar los permisos de /etc/crontab
          ansible.builtin.stat:
            path: /etc/crontab
          register: crontab_stat

        - name: 5.1.2 Corregir permisos si es necesario
          ansible.builtin.shell: | 
            chown root:root /etc/crontab
            chmod og-rwx /etc/crontab
          when: crontab_stat.stat.mode != "0600"

        - name: 5.1.2 Verificar los permisos de /etc/cron.d
          ansible.builtin.stat:
            path: /etc/cron.d
          register: crond_stat

        - name: 5.1.2 Corregir permisos de /etc/cron.d si es necesario
          ansible.builtin.shell: |
            chown root:root /etc/cron.d
            chmod og-rwx /etc/cron.d
          when: crond_stat.stat.mode != "0600"


    - name: 5.1.3. Verificar que los permisos en /etc/cron.hourly, /etc/cron.daily, /etc/cron.weekly y /etc/cron.monthly están configurados
      block:
        - name: 5.1.3 Verificar permisos en /etc/cron.hourly
          ansible.builtin.command: "ls -ltrha /etc/cron.hourly | awk '{print $1}'"
          register: crontab_hourly_search
          ignore_errors: true

        - name: 5.1.3 Corregir permisos en /etc/cron.hourly si es necesario
          ansible.builtin.shell: |
            chown root:root /etc/cron.hourly
            chmod og-rwx /etc/cron.hourly
          when: crontab_hourly_search.stdout != "-rw-------"

        - name: 5.1.3 Verificar permisos en /etc/cron.daily
          ansible.builtin.command: "ls -ltrha /etc/cron.daily | awk '{print $1}'"
          register: crontab_daily_search
          ignore_errors: true

        - name: 5.1.3 Corregir permisos en /etc/cron.daily si es necesario
          ansible.builtin.shell: |
            chown root:root /etc/cron.daily
            chmod og-rwx /etc/cron.daily
          when: crontab_daily_search.stdout != "-rw-------"

        - name: 5.1.3 Verificar permisos en /etc/cron.weekly
          ansible.builtin.command: "ls -ltrha /etc/cron.weekly | awk '{print $1}'"
          register: crontab_weekly_search
          ignore_errors: true

        - name: 5.1.3 Corregir permisos en /etc/cron.weekly si es necesario
          ansible.builtin.shell: |
            chown root:root /etc/cron.weekly
            chmod og-rwx /etc/cron.weekly
          when: crontab_weekly_search.stdout != "-rw-------"

        - name: 5.1.3 Verificar permisos en /etc/cron.monthly
          ansible.builtin.command: "ls -ltrha /etc/cron.monthly | awk '{print $1}'"
          register: crontab_monthly_search
          ignore_errors: true

        - name: 5.1.3 Corregir permisos en /etc/cron.monthly si es necesario
          ansible.builtin.shell: |
            chown root:root /etc/cron.monthly
            chmod og-rwx /etc/cron.monthly
          when: crontab_monthly_search.stdout != "-rw-------"

    - name: 5.1.5. Verificar que at/cron está restringido a usuarios autorizados
      block:
      - name: 5.1.5 Eliminar at.deny y cron.deny si existen
        ansible.builtin.file:
          path: "{{ item }}"
          state: absent
        loop:
          - /etc/cron.deny
          - /etc/at.deny

      - name: 5.1.5 Crear at.deny y cron.deny
        ansible.builtin.file:
          path: "{{ item }}"
          state: touch
        loop:
          - /etc/cron.allow
          - /etc/at.allow

      - name: 5.1.5 Asignar permisos a at.deny y cron.deny
        ansible.builtin.file:
          path: "{{ item }}"
          owner: root
          group: root
          mode: "0600"
        loop:
          - /etc/cron.allow
          - /etc/at.allow

    - name: 5.2.1. Verificar que los permisos en /etc/ssh/sshd_config están configurados
      block:
        - name: 5.2.1. Verificar que los permisos en /etc/ssh/sshd_config están configurados
          ansible.builtin.shell:
            cmd: "stat -c %a /etc/ssh/sshd_config"
          register: sshd_config_stat

        - name: 5.2.1. Corregir permisos en /etc/ssh/sshd_config si es necesario
          ansible.builtin.file:
            path: /etc/ssh/sshd_config
            owner: root
            group: root
            mode: '0600'
          when: sshd_config_stat.stdout != '0600'
    
    #- name: 5.2.1.1. Verificar que el acceso SSH está limitado
    #Se aplicó de forma manual

    - name: 5.2.1.2. Verificar que se configuran los permisos en los archivos de clave de host privados SSH
      block:
        - name: 5.2.1.2. Verificar si la distribución es RHV
          ansible.builtin.command: cat /etc/*release | grep Virtualization
          register: rhv_search
          changed_when: false
          ignore_errors: true

        - name: 5.2.1.2. Aplicar configuración de acceso SSH si no es un hipervisor Red Hat
          ansible.builtin.shell: |
            find /etc/ssh -xdev -type f -name 'ssh_host_*_key' -exec chown root:root {} \;
            find /etc/ssh -xdev -type f -name 'ssh_host_*_key' -exec chmod 0600 {} \;
          when: rhv_search.stdout == ""
 
        - name: 5.2.1.2. Mostrar mensaje si es un hypervisor Red Hat
          ansible.builtin.debug:
            msg: "5.2.1.2. Verificar que se configuran los permisos en los archivos de clave de host privados SSH: Es un hipervisor Red Hat, no se puede aplicar la configuración"
          when: rhv_search.stdout != ""
 
    - name: 5.2.1.3. Verificar que se configuran los permisos en los archivos de clave de host público SSH
      block:
        - name: 5.2.1.3 Validar si la distribución es RHV para aplicar
          ansible.builtin.shell: "cat /etc/*release | grep Virtualization"
          register: rhv_search
          ignore_errors: true

        - name: 5.2.1.3. Aplicar configuración de acceso SSH si no es un hipervisor Red Hat
          ansible.builtin.shell: |
            find /etc/ssh -xdev -type f -name 'ssh_host_*_key.pub' -exec chmod 0644 {} \;
            find /etc/ssh -xdev -type f -name 'ssh_host_*_key.pub' -exec chown root:root {} \;
          when: rhv_search.stdout == ""
 
        - name: 5.2.1.3. Mostrar mensaje si es un hypervisor Red Hat
          ansible.builtin.debug:
            msg: "5.2.1.3. Verificar que se configuran los permisos en los archivos de clave de host privados SSH: Es un hipervisor Red Hat, no se puede aplicar la configuración"
          when: rhv_search.stdout != ""            

    - name: 5.2.1.4. Verificar que SSH LogLevel es apropiado
      block:
        - name: 5.2.1.4.  Configurar LogLevel INFO en /etc/ssh/sshd_config
          ansible.builtin.shell: grep "#LogLevel" /etc/ssh/sshd_config
          register: loglevel_stat
          ignore_errors: true

        - name: 5.2.1.4 LogLevel INFO en sshd_config
          ansible.builtin.shell: |
            sed -i 's/#LogLevel INFO/LogLevel INFO/g' /etc/ssh/sshd_config
          when: loglevel_stat.stdout == "#LogLevel INFO"

    - name: 5.2.2. Verificar que el reenvío SSH X11 está deshabilitado
      block:
        - name: 5.2.2.  Configurar X11Forwarding en /etc/ssh/sshd_config
          ansible.builtin.shell: grep "X11Forwarding" /etc/ssh/sshd_config
          register: x11forwarding_stat
          ignore_errors: true

        - name: 5.2.2.  Configurar X11Forwarding en /etc/ssh/sshd_config.d/50-redhat.conf
          ansible.builtin.shell: grep "X11Forwarding" /etc/ssh/sshd_config.d/50-redhat.conf
          register: x11forwarding50_stat
          ignore_errors: true

        - name: 5.2.2. LogLevel INFO en sshd_config
          ansible.builtin.shell: |
            sed -i 's/#X11Forwarding no/X11Forwarding no/g' /etc/ssh/sshd_config
          when: x11forwarding_stat.stdout == "#X11Forwarding no"

        - name: 5.2.2. LogLevel INFO en /etc/ssh/sshd_config.d/50-redhat.conf
          ansible.builtin.shell: |
            sed -i 's/X11Forwarding yes/X11Forwarding no/g' /etc/ssh/sshd_config.d/50-redhat.conf
          when: x11forwarding50_stat.stdout == "X11Forwarding yes"
          ignore_errors: true

    - name: 5.2.3. Verificar que el SSH MaxAuthTries está configurado con el valor igual o menor que cuatro
      block:
        - name: 5.2.3. Buscar MaxAuthTries en sshd_config
          ansible.builtin.shell: grep "MaxAuthTries" /etc/ssh/sshd_config
          register: maxauthtries_stat
          ignore_errors: true

        - name: 5.2.3. Configurar MaxAuthTries en sshd_config
          ansible.builtin.shell: |
            sed -i 's/#MaxAuthTries 6/MaxAuthTries 4/g' /etc/ssh/sshd_config
          when: maxauthtries_stat.stdout == "#MaxAuthTries 6"
            
    - name: 5.2.4. Verificar que el SSH IgnoreRhosts está habilitado
      block:
        - name: 5.2.4. Buscar IgnoreRhosts en sshd_config
          ansible.builtin.shell: grep "#IgnoreRhosts" /etc/ssh/sshd_config
          register: ignorerhosts_stat
          ignore_errors: true

        - name: 5.2.4. Habilitar IgnoreRhosts en sshd_config
          ansible.builtin.shell: |
            sed -i 's/#IgnoreRhosts yes/IgnoreRhosts yes/g' /etc/ssh/sshd_config
          when: ignorerhosts_stat.stdout == "#IgnoreRhosts yes"

    - name: 5.2.5. Verificar que el SSH HostbasedAuthentication está deshabilitado
      block:
        - name: 5.2.5. Buscar HostbasedAuthentication en sshd_config
          ansible.builtin.shell: grep "#HostbasedAuthentication" /etc/ssh/sshd_config
          register: hostbased_stat
          ignore_errors: true

        - name: 5.2.5. Deshabilitar HostbasedAuthentication en sshd_config
          ansible.builtin.shell: |
            sed -i 's/#HostbasedAuthentication no/HostbasedAuthentication no/g' /etc/ssh/sshd_config
          when: hostbased_stat.stdout == "#HostbasedAuthentication no"

    #- name: 5.2.6. Verificar que el login con usuario root en SSH está deshabilitado
    #Se aplicó de forma manual
    
    - name: 5.2.7. Verificar que el SSH PermitEmptyPasswords está deshabilitado
      block:
        - name: 5.2.7 Obtener estado del SSH PermitEmptyPasswords
          ansible.builtin.shell: grep "#PermitEmptyPasswords" /etc/ssh/sshd_config
          register: permitemptypasswords_stat
          ignore_errors: true

        - name: 5.2.7 Deshabilitar PermitEmptyPasswords en sshd_config
          ansible.builtin.shell: |
            sed -i 's/#PermitEmptyPasswords no/PermitEmptyPasswords no/g' /etc/ssh/sshd_config
          when: permitemptypasswords_stat.stdout == "#PermitEmptyPasswords no" 

    - name: 5.2.8. Verificar que el SSH PermitUserEnviroment está deshabilitado
      block:
        - name: 5.2.8. Configurar PermitUserEnvironment en sshd_config
          ansible.builtin.shell: grep "#PermitUserEnvironment no" /etc/ssh/sshd_config
          register: permituserenvironment_stat
          ignore_errors: true

        - name: 5.2.8 Deshabilitar  PermitUserEnvironment en sshd_config
          ansible.builtin.shell: |
            sed -i 's/#PermitUserEnvironment no/PermitUserEnvironment no/g' /etc/ssh/sshd_config
          when: permituserenvironment_stat.stdout == "#PermitUserEnvironment no"

    - name: 5.2.9. Verificar que el intervalo de tiempo de inactividad de SSH está configurado
      block:
        - name: 5.2.9. Configurar ClientAliveInterval en sshd_config
          ansible.builtin.shell: grep "#ClientAliveInterval" /etc/ssh/sshd_config
          register: clientaliveinterval_stat
          ignore_errors: true
          
        - name: 5.2.9. Configurar ClientAliveCountMax en sshd_config
          ansible.builtin.shell: grep "#ClientAliveCountMax" /etc/ssh/sshd_config
          register: clientalivecountmax_stat
          ignore_errors: true

        - name: 5.2.9 Configurar ClientAliveInterval en sshd_config
          ansible.builtin.shell: |
            sed -i 's/#ClientAliveInterval 0/ClientAliveInterval 300/g' /etc/ssh/sshd_config
          when: clientaliveinterval_stat.stdout == "#ClientAliveInterval 0"
    
        - name: 5.2.9 Configurar ClientAliveCountMax en sshd_config
          ansible.builtin.shell: |
            sed -i 's/#ClientAliveCountMax 3/ClientAliveCountMax 0/g' /etc/ssh/sshd_config
          when: clientalivecountmax_stat.stdout == "#ClientAliveCountMax 3"

    - name: 5.2.10. Verificar que LoginGraceTime está configurado a un minuto o menos
      block:
        - name: 5.2.10. Configurar LoginGraceTime en sshd_config
          ansible.builtin.shell: grep "#LoginGraceTime" /etc/ssh/sshd_config
          register: logingracetime_stat
          ignore_errors: true

        - name: 5.2.10 LoginGraceTime en sshd_config
          ansible.builtin.shell: |
            sed -i 's/#LoginGraceTime 2m/LoginGraceTime 60/g' /etc/ssh/sshd_config
          when: logingracetime_stat.stdout == "#LoginGraceTime 2m"

    - name: 5.2.11. Verificar que el banner de advertencia de SSH está configurado
      block:
        - name: 5.2.11. Configurar banner_stat en sshd_config
          ansible.builtin.shell: grep "#Banner" /etc/ssh/sshd_config
          register: banner_stat
          ignore_errors: true

        - name: 5.2.11. Banner_stat en sshd_config
          ansible.builtin.shell: |
            sed -i 's|#Banner none|Banner /etc/issue.net|g' /etc/ssh/sshd_config
          when: banner_stat.stdout == "#Banner none"
    
    - name: 5.2.12. Verificar que SSH PAM este habilitado
      block:
        - name: 5.2.12. Configurar usepam_stat en sshd_config
          ansible.builtin.shell: grep "#UsePAM" /etc/ssh/sshd_config
          register: usepam_stat
          ignore_errors: true

        - name: 5.2.12. Usepam_stat en sshd_config
          ansible.builtin.shell: |
            sed -i 's/#UsePAM no/UsePAM yes/g' /etc/ssh/sshd_config
          when: usepam_stat.stdout == "#UsePAM no"

    - name: 5.2.13. Verificar que SSH AllowTcpForwarding está deshabilitado #Sale como 5.2.17 en el scan
      block:
        - name: 5.2.13. Configurar AllowTcpForwarding en sshd_config
          ansible.builtin.shell: grep "#AllowTcpForwarding" /etc/ssh/sshd_config
          register: allowtcpforwarding_stat
          ignore_errors: true

        - name: 5.2.13. AllowTcpForwarding en sshd_config
          ansible.builtin.shell: |
            sed -i 's/#AllowTcpForwarding yes/AllowTcpForwarding no/g' /etc/ssh/sshd_config
          when: allowtcpforwarding_stat.stdout == "#AllowTcpForwarding yes"

    - name: 5.2.14. Verificar que SSH MaxStartups esta configurada
      block:
        - name: 5.2.14. Configurar MaxStartups en sshd_config
          ansible.builtin.shell: grep "#MaxStartups" /etc/ssh/sshd_config
          register: maxstartups_stat
          ignore_errors: true

        - name: 5.2.14. MaxStartups en sshd_config
          ansible.builtin.shell: |
            sed -i 's/#MaxStartups 10:30:100/MaxStartups 10:30:100/g' /etc/ssh/sshd_config
          when: maxstartups_stat.stdout == "#MaxStartups 10:30:100"
          
    - name: 5.2.15. Verificar que SSH MaxSessions esta configurado a 4 o menos
      block:
        - name: 5.2.15. Configurar MaxSessions en sshd_config
          ansible.builtin.shell: grep "#MaxSessions" /etc/ssh/sshd_config
          register: maxsessions_stat
          ignore_errors: true

        - name: 5.2.15. MaxSessions en sshd_config
          ansible.builtin.shell: |
            sed -i 's/#MaxSessions 10/MaxSessions 10/g' /etc/ssh/sshd_config
          when: maxsessions_stat.stdout == "#MaxSessions 10"

    - name: 5.3.1 Crear un perfil de authselect personalizado
      block:
        - name: 5.3.1  Verificar si el perfil de authselect sssd existe
          ansible.builtin.shell: ls /etc/authselect/custom/
          register: authselect_profile_stat
          changed_when: false

        - name: 5.3.1 Crear perfil de authselect personalizado sssd
          ansible.builtin.command: authselect create-profile sssd -b sssd
          when: authselect_profile_stat.stdout == "" 
        
        - name: 5.3.2 Seleccionar perfil de authselect personalizado
          ansible.builtin.command: authselect select custom/sssd --force
          changed_when: false

    - name: 5.3.2 Crear un perfil de authselect personalizado
      block:
        - name: 5.3.2 Seleccionar perfil de authselect personalizado
          ansible.builtin.command: authselect select custom/sssd with-faillock
          changed_when: false

        - name: 5.3.2 Verificar el perfil de authselect creado y seleccionado
          ansible.builtin.command: authselect current
          changed_when: false

    - name: 5.3.1 Verificar que authselect incluya with-faillock
      block:
        - name: 5.3.1 Habilitar feature with-faillock en authselect
          ansible.builtin.command: authselect enable-feature with-faillock
          changed_when: false

        - name: 5.3.1 Habilitar feature with-fingerprint en authselect
          ansible.builtin.command: authselect enable-feature with-fingerprint
          changed_when: false

        - name: 5.3.1 Habilitar feature without-nullok en authselect
          ansible.builtin.command: authselect enable-feature without-nullok
          changed_when: false

        - name: 5.3.1 Habilitar feature with-silent-lastlog en authselect
          ansible.builtin.command: authselect enable-feature with-silent-lastlog
          changed_when: false

        - name: 5.3.1 Verificar las features habilitadas en authselect
          ansible.builtin.command: authselect current
          changed_when: false
    
    #- name: 5.3.3. Verificar que authselect incluya with-faillock
    #Se aplicó de forma manual
    
    - name: 5.4.0 Realizar respaldo /etc/pam.d/password-auth /etc/pam.d/system-auth /etc/security/pwquality.conf
      block:
        - name: Verificar si la cadena de control 5.4.1 existe
          ansible.builtin.shell:
            cmd: "grep -q '# Control 5.4.1' {{ item.src }}"
          loop:
            - { src: "/etc/pam.d/password-auth" }
            - { src: "/etc/pam.d/system-auth" }
            - { src: "/etc/security/pwquality.conf" }
          register: grep_result
          ignore_errors: true

        - name: 5.4.0 Realizar respaldo /etc/pam.d/password-auth /etc/pam.d/system-auth /etc/security/pwquality.conf
          ansible.builtin.shell:
            cmd: "cp -rp {{ item.src }} {{ item.dest }}"
          loop:
            - { src: "/etc/pam.d/password-auth", dest: "/etc/pam.d/password-auth-back" }
            - { src: "/etc/pam.d/system-auth", dest: "/etc/pam.d/system-auth-back" }
            - { src: "/etc/security/pwquality.conf", dest: "/etc/security/pwquality.conf-back" }
          when: not grep_result.results | selectattr('rc', 'defined') | map(attribute='rc') | list | sum > 0

##################################################################################################################

    - name: 5.4.1 Modificar /etc/pam.d/password-auth
      block:
        - name: 5.4.1 Buscar la regla en /etc/pam.d/password-auth
          ansible.builtin.command: "grep '# Control 5.4.1' /etc/pam.d/password-auth"
          register: grep_result
          ignore_errors: true

        - name: 5.4.1 Vaciar el archivo
          ansible.builtin.file:
            path: "/etc/pam.d/password-auth"  # Reemplaza "/etc/pam.d/password-auth"
            state: touch
          when: grep_result.stdout == ""

        - name: 5.4.1 Escribir el contenido en el archivo
          ansible.builtin.copy:
            content: |
              # Generated by authselect
              # Do not modify this file manually.
              #
              # Control 5.4.1
              #
              auth        required                                     pam_env.so
              auth        required                                     pam_faildelay.so delay=2000000
              auth        required                                     pam_faillock.so preauth silent deny=3 unlock_time=900
              auth        [default=1 ignore=ignore success=ok]         pam_usertype.so isregular
              auth        [default=1 ignore=ignore success=ok]         pam_localuser.so
              auth        sufficient                      pam_unix.so nullok try_first_pass
              auth        [default=1 ignore=ignore success=ok]         pam_usertype.so isregular
              auth        sufficient                                   pam_sss.so forward_pass
              auth        [default=die]                                pam_faillock.so authfail deny=3 unlock_time=900
              auth        sufficient                                   pam_faillock.so authsucc audit deny=3 unlock_time=900
              auth        required                                     pam_deny.so

              account     required                                     pam_faillock.so
              account     required                                     pam_unix.so
              account     sufficient                                   pam_localuser.so
              account     sufficient                                   pam_usertype.so issystem
              account     [default=bad success=ok user_unknown=ignore] pam_sss.so
              account     required                                     pam_permit.so

              password    requisite                                    pam_pwquality.so try_first_pass  retry=3 minlen=12 dcredit=-1 ucredit=-1 ocredit=-1 lcredit=-1
              password    sufficient                                   pam_unix.so sha512 shadow nullok try_first_pass use_authtok remember=10
              password    sufficient                                   pam_sss.so use_authtok
              password    required                                     pam_deny.so

              session     optional                                     pam_keyinit.so revoke
              session     required                                     pam_limits.so
              -session    optional                                     pam_systemd.so
              session     [success=1 default=ignore]                   pam_succeed_if.so service in crond quiet use_uid
              session     required                                     pam_unix.so
              session     optional                                     pam_sss.so
            dest: "/etc/pam.d/password-auth"
          when: grep_result.stdout == ""
          changed_when: false

        - name: 5.4.1 Aplicar restorecon
          ansible.builtin.shell:
            restorecon /etc/pam.d/password-auth
 
#############################################################################################################

    - name: 5.4.2 Modificar /etc/pam.d/system-auth
      block:
        - name: 5.4.2 Buscar la regla en /etc/pam.d/system-auth
          ansible.builtin.command: "grep '# Control 5.4.2' /etc/pam.d/system-auth"
          register: grep_result
          ignore_errors: true

        - name: 5.4.2 Vaciar el archivo
          ansible.builtin.file:
            path: "/etc/pam.d/system-auth"  # Reemplaza "/etc/pam.d/system-auth"
            state: touch
          when: grep_result.stdout == ""

        - name: 5.4.2 Escribir el contenido en el archivo
          ansible.builtin.copy:
            content: |
              # Generated by authselect
              # Do not modify this file manually.
              #
              # Control 5.4.2
              #
              auth        required                                     pam_env.so
              auth        required                                     pam_faildelay.so delay=2000000
              auth        required                                     pam_faillock.so preauth silent deny=3 unlock_time=900
              auth        sufficient                                   pam_fprintd.so
              auth        [default=1 ignore=ignore success=ok]         pam_usertype.so isregular
              auth        [default=1 ignore=ignore success=ok]         pam_localuser.so
              auth        sufficient                      pam_unix.so nullok try_first_pass
              auth        [default=1 ignore=ignore success=ok]         pam_usertype.so isregular
              auth        sufficient                                   pam_sss.so forward_pass
              auth        [default=die]                                pam_faillock.so authfail deny=3 unlock_time=900
              auth        sufficient                                   pam_faillock.so authsucc audit deny=3 unlock_time=900
              auth        required                                     pam_deny.so

              account     required                                     pam_faillock.so
              account     required                                     pam_unix.so
              account     sufficient                                   pam_localuser.so
              account     sufficient                                   pam_usertype.so issystem
              account     [default=bad success=ok user_unknown=ignore] pam_sss.so
              account     required                                     pam_permit.so

              password    requisite                                    pam_pwquality.so try_first_pass  retry=3 minlen=12 dcredit=-1 ucredit=-1 ocredit=-1 lcredit=-1
              password    sufficient                                   pam_unix.so sha512 shadow nullok try_first_pass use_authtok remember=10
              password    sufficient                                   pam_sss.so use_authtok
              password    required                                     pam_deny.so

              session     optional                                     pam_keyinit.so revoke
              session     required                                     pam_limits.so
              -session    optional                                     pam_systemd.so
              session     [success=1 default=ignore]                   pam_succeed_if.so service in crond quiet use_uid
              session     required                                     pam_unix.so
              session     optional                                     pam_sss.so
            dest: "/etc/pam.d/system-auth"
          when: grep_result.stdout == ""
          changed_when: false

        - name: 5.4.2 Aplicar restorecon
          ansible.builtin.shell:
            restorecon /etc/pam.d/system-auth
            
#############################################################################################################          
            
    - name: 5.4.3 Modificar /etc/security/pwquality.conf
      block:
        - name: 5.4.3 Buscar la regla en /etc/security/pwquality.conf
          ansible.builtin.command: "grep '# Control 5.4.3' /etc/security/pwquality.conf"
          register: grep_result
          ignore_errors: true

        - name: 5.4.3 Vaciar el archivo
          ansible.builtin.file:
            path: "/etc/security/pwquality.conf"  # Reemplaza "/etc/security/pwquality.conf"
            state: touch
          when: grep_result.stdout == ""

        - name: 5.4.3 Escribir el contenido en el archivo
          ansible.builtin.copy:
            content: |
              # Configuration for systemwide password quality limits
              # Defaults:
              # 
              # Control 5.4.3
              #
              # Configuration for systemwide password quality limits
              # Defaults:
              #
              # Number of characters in the new password that must not be present in the
              # old password.
              # difok = 1
              #
              # Minimum acceptable size for the new password (plus one if
              # credits are not disabled which is the default). (See pam_cracklib manual.)
              # Cannot be set to lower value than 6.
              minlen = 12
              #
              # The maximum credit for having digits in the new password. If less than 0
              # it is the minimum number of digits in the new password.
              dcredit = -1
              #
              # The maximum credit for having uppercase characters in the new password.
              # If less than 0 it is the minimum number of uppercase characters in the new
              # password.
              ucredit = -1
              #
              # The maximum credit for having lowercase characters in the new password.
              # If less than 0 it is the minimum number of lowercase characters in the new
              # password.
              lcredit = -1
              #
              # The maximum credit for having other characters in the new password.
              # If less than 0 it is the minimum number of other characters in the new
              # password.
              ocredit = -1
              #
              # The minimum number of required classes of characters for the new
              # password (digits, uppercase, lowercase, others).
              # minclass = 0
              #
              # The maximum number of allowed consecutive same characters in the new password.
              # The check is disabled if the value is 0.
              # maxrepeat = 0
              #
              # The maximum number of allowed consecutive characters of the same class in the
              # new password.
              # The check is disabled if the value is 0.
              # maxclassrepeat = 0
              #
              # Whether to check for the words from the passwd entry GECOS string of the user.
              # The check is enabled if the value is not 0.
              # gecoscheck = 0
              #
              # Whether to check for the words from the cracklib dictionary.
              # The check is enabled if the value is not 0.
              # dictcheck = 1
              #
              # Whether to check if it contains the user name in some form.
              # The check is enabled if the value is not 0.
              # usercheck = 1
              #
              # Length of substrings from the username to check for in the password
              # The check is enabled if the value is greater than 0 and usercheck is enabled.
              # usersubstr = 0
              #
              # Whether the check is enforced by the PAM module and possibly other
              # applications.
              # The new password is rejected if it fails the check and the value is not 0.
              # enforcing = 1
              #
              # Path to the cracklib dictionaries. Default is to use the cracklib default.
              # dictpath =
              #
              # Prompt user at most N times before returning with error. The default is 1.
              retry = 3
              #
              # Enforces pwquality checks on the root user password.
              # Enabled if the option is present.
              # enforce_for_root
              #
              # Skip testing the password quality for users that are not present in the
              # /etc/passwd file.
              # Enabled if the option is present.
              # local_users_only

            dest: "/etc/security/pwquality.conf"
          when: grep_result.stdout == ""
          changed_when: false

        - name: 5.4.3 Aplicar restorecon
          ansible.builtin.shell:
            restorecon /etc/security/pwquality.conf

#############################################################################################################   

    - name: 5.5.1. Verificar que la contraseña tiene una caducidad de noventa días o menor # El login de root falla con este control
      block:
        - name: 5.5.1 Buscar la regla en /etc/login.defs
          ansible.builtin.shell: grep '^PASS_MAX_DAYS[[:space:]]\+99999$' /etc/login.defs
          register: grep_result
          ignore_errors: true      
      
        - name: 5.5.1 Verificar y ejecutar requisitos /etc/login.defs
          ansible.builtin.shell: |
            sed -i 's/^PASS_MAX_DAYS[[:space:]]\+99999$/PASS_MAX_DAYS   90/g' /etc/login.defs
          when: grep_result.stdout != ''
          changed_when: false
          
        - name: 5.5.1 Obtener lista de usuarios con contraseñas configuradas
          ansible.builtin.shell: |
            grep ':\$' /etc/shadow | cut -d':' -f1
          register: userpasswordmax
          changed_when: false
    
        - name: 5.5.1 Modificar los parámetros de usuario
          ansible.builtin.command: "chage --maxdays 90 {{ item }}"
          loop: "{{ userpasswordmax.stdout_lines }}"
        
        - name: 5.1.1 Control. Aplicar passwd -x -1 root
          ansible.builtin.shell: |
            passwd -x -1 root
          ignore_errors: true    

    - name: 5.5.2. Verificar que la contraseña tiene una caducidad de noventa días o menor
      block:
        - name: 5.5.2 Buscar la regla en /etc/login.defs
          ansible.builtin.shell: grep '^PASS_MIN_DAYS[[:space:]]\+0$' /etc/login.defs
          register: grep_result
          ignore_errors: true      
      
        - name: 5.5.2 Verificar y ejecutar requisitos /etc/login.defs
          ansible.builtin.shell: |
            sed -i 's/^PASS_MIN_DAYS[[:space:]]\+0$/PASS_MIN_DAYS   1/g' /etc/login.defs
          when: grep_result.stdout != ''
          changed_when: false

        - name: 5.5.2 Obtener lista de usuarios con contraseñas configuradas
          ansible.builtin.shell: |
            grep ':\$' /etc/shadow | cut -d':' -f1
          register: userpasswordmin
          changed_when: false
    
        - name: 5.5.2 Modificar los parámetros de usuario
          ansible.builtin.command: "chage --mindays 1 {{ item }}"
          loop: "{{ userpasswordmin.stdout_lines }}"

# Verificar / Falso positivo
    - name: 5.5.3. Verificar que los días de advertencia de caducidad de la contraseña es siete días o mayor
      block:
        - name: 5.5.3 Buscar la regla en /etc/login.defs #Falso positivo
          ansible.builtin.shell: "grep 'PASS_WARN_AGE' /etc/login.defs"
          register: grep_result
          ignore_errors: true      
      
        - name: 5.5.3 Verificar y ejecutar requisitos /etc/login.defs
          ansible.builtin.shell: |
            sed -i 's/PASS_WARN_AGE   7/PASS_WARN_AGE   7/g' /etc/login.defs
          when: grep_result.stdout == 'PASS_WARN_AGE   7'
          changed_when: false
          
        - name: 5.5.3 Obtener lista de usuarios con contraseñas configuradas
          ansible.builtin.shell: | 
            grep ':\$' /etc/shadow | cut -d':' -f1
          register: userwarndays
          changed_when: false
    
        - name: 5.5.3 Modificar los parámetros de usuario
          ansible.builtin.command: "chage --warndays 7 {{ item }}"
          loop: "{{ userwarndays.stdout_lines }}"

# Verificar
    - name: 5.5.4. Verificar que el bloqueo de contraseñas inactivas es de noventa días o menor
      block:
        - name: 5.5.4 Verificar que el bloqueo de contraseñas inactivas es de noventa días o menor
          ansible.builtin.shell: |
            useradd -D -f 90

        - name: 5.5.4 Obtener lista de usuarios con contraseñas configuradas
          ansible.builtin.shell: |
            grep ':\$' /etc/shadow | cut -d':' -f1
          register: userinactive
          changed_when: false
    
        - name: 5.5.4 Modificar los parámetros de usuario
          ansible.builtin.command: "chage --inactive 90 {{ item }}"
          loop: "{{ userinactive.stdout_lines }}"

    #- name: 5.5.5. Verificar la fecha del último cambio de contraseña de todos los usuarios
    # Se aplicó de forma manual
    
    - name: 5.5.6. Verificar que las cuentas por defecto del sistema no permiten logearse
      block:
        - name: 5.5.6. Buscar regla "cuentas por defecto del sistema no permiten logearse"
          ansible.builtin.shell: |
            egrep -v "^\+" /etc/passwd | awk -F: '($1!="root" && $1!="sync" && $1!="shutdown" && $1!="halt" && $3<1000 && $7!="/sbin/nologin" && $7!="/bin/false") {print}'
          register: grep_result
          ignore_errors: true      
      
        - name: 5.5.6. Verificar que las cuentas por defecto del sistema no permiten logearse
          ansible.builtin.shell: |
            for user in `awk -F: '($3 < 1000) {print $1 }' /etc/passwd` ; do
                if [ $user != "root" ]; then
                        usermod -L $user
                    if [ $user != "sync" ] && [ $user != "shutdown" ] && [ $user != "halt" ];
                            then
                        usermod -s /sbin/nologin $user
                    fi
                fi
            done
          when: grep_result.stdout != ""
          changed_when: false
      

    - name: 5.5.7. Verificar que el valor timeout por defecto para los usuarios es novecientos segundos o menos
      block:
        - name: 5.5.7 Obtener valor de timeout por defecto para los usuarios en /etc/bashrc
          ansible.builtin.shell: "grep '#Control 5.5.7' /etc/bashrc"
          register: grep_result
          ignore_errors: true      
      
        - name: 5.5.7 Configurar TMOUT en /etc/bashrc
          ansible.builtin.shell: |
            echo "" >> /etc/bashrc
            echo "#Control 5.5.7" >> /etc/bashrc
            echo "TMOUT=900" >> /etc/bashrc
            echo "umask 027" >> /etc/bashrc
          when: grep_result.rc != 0
          changed_when: false

    - name: 5.5.7. Verificar que el valor timeout por defecto para los usuarios es novecientos segundos o menos
      block:
        - name: 5.5.7 Obtener valor de timeout por defecto para los usuarios en /etc/profile
          ansible.builtin.shell: "grep '#Control 5.5.7' /etc/profile"
          register: grep_result
          ignore_errors: true      
      
        - name: 5.5.7 Configurar TMOUT en  /etc/profile
          ansible.builtin.shell: |
            echo "" >>  /etc/profile
            echo "#Control 5.5.7" >>  /etc/profile
            echo "TMOUT=900" >> /etc/profile
            echo "umask 027" >> /etc/profile
          when: grep_result.rc != 0
          changed_when: false
    
    - name: 5.5.8. Verificar que el grupo por defecto para la cuenta root es GID 0
      ansible.builtin.shell: usermod -g 0 root

    #- name: 5.5.9. Verificar que el valor umask por defecto para los usuarios es 027 o más restrictivo
    # Se aplicó de forma manual
    
    #- name: 5.6. Verificar que el login de root esta restringido a la consola del sistema
    # Se aplicó de forma manual
    
    - name: 5.7. Verificar que acceso al comando su está restringido
      block:
        - name: 5.7. Buscar authrequired en sshd_config
          ansible.builtin.shell: grep "#auth\s*required\s*pam_wheel\.so use_uid" /etc/pam.d/su
          register: authrequired
          ignore_errors: true

        - name: 5.7. Deshabilitar authrequired en /etc/pam.d/su
          ansible.builtin.shell: |
            sed -i 's/^#auth\s*required\s*pam_wheel\.so use_uid/auth            required        pam_wheel.so use_uid/g' /etc/pam.d/su
          when: authrequired.stdout != ""

